#include <Arduino.h>
#include "GC_display.h"
#include "buffers.h"
#include <TFT_eSPI.h> // Hardware-specific library

//if you want to use DEBUG_DISPLAY, make sure the corresponding pin is free
//#define DEBUG_DISPLAY

uint8_t display_OUT_buffer[DISPLAY_OUT_BUFFER_SIZE];

TFT_eSPI tft = TFT_eSPI();       // Invoke custom library

uint8_t cnt=0,incr=0;

uint16_t igt[64*4]={0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,
0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,};
uint16_t igt2[64*4]={
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,
0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,0x9999,};


int nrl=0,nrc=0;
void updateDisplay(){
  #ifdef DEBUG_DISPLAY
    pd=!pd;digitalWrite(0,pd);
  #endif

  //SPI.beginTransaction(SPISettings(100000000, MSBFIRST, SPI_MODE0));
  SPI.setClockDivider(0x80000000);
  pinMode(DISPLAY_DC_PIN,OUTPUT);//disable special function
  //same as pinMode(DISPLAY_DC_PIN,OUTPUT); but faster
  
  if(received){
    tft.setSwapBytes(true);
    tft.pushImage(88+nrl, 88+32*nrc, 1, 32, (uint16_t*)TESTPKT);
    if (nrc == 0) {
      nrc++;
    }
    else {
      nrc = 0;
      nrl++;
      if (nrl == 64)nrl = 0;
    }
    received=0;
  }
  
  GPOS = (1<<DISPLAY_CS_PIN);
  
  #ifdef DEBUG_DISPLAY
    delayMicroseconds(300);
  #endif
}

void initializeDisplay(){
  tft.init();
  delay(5);
  tft.setRotation(0);
  tft.fillScreen(TFT_RED);
  tft.writecommand(0x29);
  digitalWrite(DISPLAY_CS_PIN,HIGH);
  received = 0;
}
